generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  clerkId  String  @unique
  name     String?
  bio      String?
  image    String?
  location String?
  website  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts      Post[]
  comments   Comment[]
  like       Like[]
  followers  Follows[] @relation("followers")
  followings Follows[] @relation("followings")

  notifications        Notification[] @relation("userNotification")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post {
  id       String  @id @default(cuid())
  authorId String
  content  String?
  image    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  like          Like[]
  notifications Notification[]
}

model Comment {
  id       String @id @default(cuid())
  content  String
  authorId String
  postId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId String

  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String

  createdAt DateTime @default(now())

  follower  User @relation("followings", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?

  createdAt DateTime @default(now())

  user    User     @relation("userNotification", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
